# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-11-16 15:40
# Customized by tfeiler, to control the order and add the migrate_litter_effects_values
#
# run via:
#   python manage.py migrate
# reverse (to previous migration) with something like:
#   python manage.py migrate animal 0026_animal_form_instructions_updates
#
from __future__ import unicode_literals

from django.db import migrations, models

def migrate_litter_effects_values(apps, schema_editor):
    Experiment = apps.get_model('animal', 'Experiment')

    # ok to loop through all Experiments -- we could filter on just the ones that 
    # are type Rp/Dv/Ot as those are the only ones that showed the litter effects form elements,
    # but the others get NA/emptystring so even there it's ok to copy them through.
    for experiment in Experiment.objects.all():

        animal_groups = list(experiment.animal_groups.all())

        if len(animal_groups) == 0:
            print("!!! WARNING !!! experiment: [" + str(experiment.id) + "]/[" + experiment.name + "] has no animal groups; litter data [" + experiment.litter_effects + "]/[" + experiment.litter_effect_notes + "] will be lost...")

        for animal_group in animal_groups:
            endpoints = list(animal_group.endpoints.all())

            if len(endpoints) == 0:
                print("!!! WARNING !!! experiment: [" + str(experiment.id) + "]/[" + experiment.name + "], animalgroup [" + str(animal_group.id) + "]/[" + animal_group.name + "]  has no endpoints ; litter data [" + experiment.litter_effects + "]/[" + experiment.litter_effect_notes + "] may be lost (there may be other groups for this experiment that do have endplints)...")

            for endpoint in endpoints:
                # print("OK - writing [" + str(experiment.id) + "]/[" + experiment.litter_effects + "] -> [" + str(endpoint.id) + "]...")
                endpoint.litter_effects = experiment.litter_effects
                endpoint.litter_effect_notes = experiment.litter_effect_notes
                endpoint.save()

"""
When reversing this migration, we can look at each experiment and look at all of its
animal_group and endpoint children. If ALL of them have the exact same litter_effects
and litter_effect_notes values (like, if we just ran the migration for instance), we can
reverse it and write the data back to experiment.litter_effects / litter_effect_notes.

Otherwise all we can do is warn the person running the reversed migration. For the 
migration 0025_animal_diet_field_relocation.py, I built up a string to combine the values and
stuffed that in. But in this case litter_effects is a 2 character field and even notes is only 128
characters so if there are differing values, we definitely can't fit them into litter_effects, and
are probably unable to do so for notes. Since the migration is unlikely to be reversed in anything
other than a development scenario, I think that's ok.
"""
def reverse_migrate_litter_effects_values(apps, schema_editor):
    Experiment = apps.get_model('animal', 'Experiment')

    for experiment in Experiment.objects.all():
        last_le = None
        last_le_notes = None
        differing_values_found = False

        animal_groups = list(experiment.animal_groups.all())

        for animal_group in animal_groups:
            endpoints = list(animal_group.endpoints.all())

            for endpoint in endpoints:
                loop_le = endpoint.litter_effects
                loop_le_notes = endpoint.litter_effect_notes

                if last_le is not None:
                    if last_le != loop_le or last_le_notes != loop_le_notes:
                        differing_values_found = True
                        break

                last_le = loop_le
                last_le_notes = loop_le_notes


        if differing_values_found:
            print("!!! WARNING !!! experiment: [" + str(experiment.id) + "]/[" + experiment.name + "] had differing values and couldn't be reversed...")
        else:
            if last_le is not None: # (some experiments don't have an animal group or endpoint)
                experiment.litter_effects = last_le
                experiment.litter_effect_notes = last_le_notes
                experiment.save()



class Migration(migrations.Migration):

    dependencies = [
        ('animal', '0026_animal_form_instructions_updates'),
    ]

    operations = [
        migrations.AddField(
            model_name='endpoint',
            name='litter_effect_notes',
            field=models.CharField(blank=True, help_text='Any additional notes describing how litter effects were controlled', max_length=128),
        ),
        migrations.AddField(
            model_name='endpoint',
            name='litter_effects',
            field=models.CharField(choices=[('NA', 'Not applicable'), ('NR', 'Not reported'), ('YS', 'Yes, statistical control'), ('YD', 'Yes, study-design'), ('N', 'No'), ('O', 'Other')], default='NA', help_text='Type of controls used for litter-effects. The "No" response will be infrequently used. More typically the information will be "Not reported" and assumed not considered. Only use "No" if it is explicitly mentioned in the study that litter was not controlled for.', max_length=2),
        ),
        migrations.RunPython(migrate_litter_effects_values, reverse_migrate_litter_effects_values),
        migrations.RemoveField(
            model_name='experiment',
            name='litter_effect_notes',
        ),
        migrations.RemoveField(
            model_name='experiment',
            name='litter_effects',
        ),
    ]
