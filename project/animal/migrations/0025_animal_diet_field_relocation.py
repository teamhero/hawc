# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-09-25 20:01
# Customized by tfeiler, to control the order and add the migrate_diet_values
#
# run via:
#   python manage.py migrate
# reverse (to previous migration) with something like:
#   python manage.py migrate animal 0024_auto_20180921_1249
#
from __future__ import unicode_literals

from django.db import migrations, models

def migrate_diet_values(apps, schema_editor):
    Experiment = apps.get_model('animal', 'Experiment')
    AnimalGroup = apps.get_model('animal', 'Experiment')
    experiment_idx = 0
    for experiment in Experiment.objects.all():

        animal_groups = list(experiment.animal_groups.all())

        if len(animal_groups) == 0:
            print("!!! WARNING !!! experiment: [" + str(experiment.id) + "]/[" + experiment.name + "] has no animal groups; diet [" + experiment.diet + "] will be lost...")

        for animal_group in animal_groups:
            animal_group.diet = experiment.diet
            animal_group.save()

        experiment_idx = experiment_idx + 1

def reverse_migrate_diet_values(apps, schema_editor):
    Experiment = apps.get_model('animal', 'Experiment')
    AnimalGroup = apps.get_model('animal', 'Experiment')
    experiment_idx = 0
    for experiment in Experiment.objects.all():

        animal_groups = list(experiment.animal_groups.all())

        # when reversing this operation, need to look at all animal groups.
        # if they all have the same diet (this will be the case if we just applied
        # this migration, but in the future will likely not be), then just
        # use the value from any of them. If however there are any differences, then
        # build up a list of group name + diet, and write THAT back to experiment.diet.
        combo = []
        last_diet = None
        use_combo = False
        for animal_group in animal_groups:
            loop_diet = animal_group.diet
            combo.append(animal_group.name + ": " + loop_diet)
            if last_diet is not None and loop_diet != last_diet:
                use_combo = True

            last_diet = loop_diet

        if last_diet is not None: # (some experiments don't have an animal group)
            if use_combo:
                combined_diet_val = "; ".join(combo)
                experiment.diet = combined_diet_val
            else:
                experiment.diet = last_diet

            experiment.save()

        experiment_idx = experiment_idx + 1

class Migration(migrations.Migration):

    dependencies = [
        ('animal', '0024_auto_20180921_1249'),
    ]

    operations = [
        migrations.AddField(
            model_name='animalgroup',
            name='diet',
            field=models.TextField(blank=True, help_text='Describe diet as presented in the paper (e.g., "soy-protein free 2020X Teklad," "Atromin 1310", "standard rodent chow").'),
        ),
        migrations.RunPython(migrate_diet_values, reverse_migrate_diet_values),
        migrations.RemoveField(
            model_name='experiment',
            name='diet',
        ),
    ]
