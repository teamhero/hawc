# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-04-26 16:22
# Customized by tfeiler to control the order and handle data translation/conversion
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models

# note - this migration is NOT reversible

def convert_pvals_to_siglevels(apps, schema_editor):
    print("\nconverting GroupResult pvalues to significance levels: qualifier, p_value -> significant, level")
    GroupResult = apps.get_model('epi', 'GroupResult')

    gr_idx = 0
    for gr in GroupResult.objects.all():
        sig_level = None

        if gr.p_value_qualifier == '-' or gr.p_value_qualifier == 'n.s.':
            # None is correct
            pass
        elif gr.p_value_qualifier == '=' or gr.p_value_qualifier == '<':
            if gr.p_value is None:
                print("WARNING (=/< with None) - combination of [%s] and [%s] shouldn't occur..." % (gr.p_value_qualifier, gr.p_value))
            elif gr.p_value <= .001:
                sig_level = .001
            elif gr.p_value <= .01:
                sig_level = .01
            elif gr.p_value <= .05:
                sig_level = .05
        elif gr.p_value_qualifier == '>':
            if gr.p_value is None:
                print("WARNING (> with None) - combination of [%s] and [%s] shouldn't occur..." % (gr.p_value_qualifier, gr.p_value))
            elif gr.p_value < .05:
                print("WARNING (> with value greater than .05) - combination of [%s] and [%s] shouldn't occur..." % (gr.p_value_qualifier, gr.p_value))

        is_significant = sig_level is not None and sig_level > 0

        gr.significant = is_significant
        gr.significance_level = sig_level

        print("Moving group result %s: [%s], [%s] --> [%s], [%s]" % (gr.id, gr.p_value_qualifier, gr.p_value, is_significant, sig_level))

        gr.save()

        gr_idx = gr_idx + 1
    print("done converting pvalues to significance levels")

class Migration(migrations.Migration):

    dependencies = [
        ('epi', '0017_multiple_exposure_cts_c'),
    ]

    operations = [
        migrations.AddField(
            model_name='groupresult',
            name='significance_level',
            field=models.FloatField(blank=True, default=None, help_text='For p-values, 0.05 or <0.05 should be coded as 0.05; 0.01 or <0.01 should be coded as 0.01; 0.001 or <0.001 should be coded as 0.001.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Significance Level (if significant)'),
        ),
        migrations.AddField(
            model_name='groupresult',
            name='significant',
            field=models.BooleanField(default=False, verbose_name='Statistically significant from control'),
        ),
        migrations.RunPython(convert_pvals_to_siglevels),
        migrations.RemoveField(
            model_name='groupresult',
            name='p_value',
        ),
        migrations.RemoveField(
            model_name='groupresult',
            name='p_value_qualifier',
        ),
    ]
